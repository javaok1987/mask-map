{"version":3,"sources":["components/map.js","components/drugstore-card.js","components/city-select.js","App.js","serviceWorker.js","index.js"],"names":["L","window","turf","getColor","d","onEachFeature","feature","layer","popupContent","properties","name","mask_adult","mask_child","bindPopup","Map","props","state","myPlace","markerPool","maskMap","countryLayer","countryName","this","markerClusterGroup","zoomToBoundsOnClick","removeOutsideVisibleBounds","center","latitude","longitude","map","zoom","layers","tileLayer","attribution","id","accessToken","marker","addTo","locate","setView","maxZoom","on","e","setState","latlng","setLatLng","openPopup","legend","control","position","onAdd","div","DomUtil","create","grades","labels","i","length","push","innerHTML","join","getLegendControl","customAction","Toolbar2","Action","extend","options","toolbarIcon","html","tooltip","addHooks","flyTo","Control","actions","clearLayers","focus","_focus","LatLng","lat","lng","country","centerOfMass","centerLatLng","geometry","coordinates","geoJson","addData","markersData","ptsWithin","pointsWithinPolygon","geoJSON","style","color","pointToLayer","maskCount","circleMarker","radius","weight","opacity","fillOpacity","fillColor","getStyle","addLayer","React","Component","DrugdrugstoreCard","handleClick","drugstore","onClickDrugstore","mask","total","percent","currentLocation","city","district","className","features","address","substring","Card","key","Content","Header","onClick","Meta","phone","Description","href","target","rel","service_note","Message","size","Icon","extra","Progress","getPercent","indicating","SelectCountry","handleCity","value","onSelectCity","currentCity","CITY_AREA","find","item","index","array","districtOptions","districts","text","_district","onSelectDistrict","handleDistrict","cityOptions","Dropdown","button","floating","labeled","scrolling","icon","onChange","App","twCountyGJson","filter","county","handleClickDrugstore","viewport","drugstoreGJson","visible","fetch","then","response","json","geojson","document","body","classList","add","catch","err","console","log","Button","compact","labelPosition","toggleSidebar","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.cf05335f.chunk.js","sourcesContent":["import React from 'react';\n\n// Import CSS from Leaflet and plugins.\nimport 'leaflet.markercluster/dist/MarkerCluster.css';\nimport 'leaflet.markercluster/dist/MarkerCluster.Default.css';\nimport 'leaflet-toolbar/dist/leaflet.toolbar.css';\n\n// Import JS from Leaflet and plugins.\nimport 'leaflet.markercluster';\nimport 'leaflet-toolbar';\n\nimport '../styles/map.scss';\n\nconst L = window.L;\nconst turf = window.turf;\n\nconst getColor = d => {\n  return d > 200 ? '#7cafc2' : d > 150 ? '#86c1b9' : d > 100 ? '#a1b56c' : d > 50 ? '#f7ca88' : d > 0 ? '#dc9656' : 'rgba(236,222,239,.9)';\n};\n\nconst getStyle = maskCount => {\n  return {\n    radius: 8,\n    weight: 1,\n    opacity: 1,\n    fillOpacity: 1,\n    fillColor: getColor(maskCount)\n  };\n};\n\nconst getLegendControl = () => {\n  //Custom Legend Control.\n  const legend = L.control({ position: 'bottomright' });\n  legend.onAdd = () => {\n    const div = L.DomUtil.create('div', 'legend-panel');\n    const grades = [0, 50, 100, 150, 200];\n    const labels = [];\n\n    for (let i = 0; i < grades.length; i++) {\n      labels.push(`\n\n        <div class=\"legend-item\">\n        成人口罩數量:<i style=\"background:${getColor(grades[i] + 1)}\"></i>\n          ${grades[i]}${grades[i + 1] ? '&ndash;' + grades[i + 1] + '<br>' : '+'}\n        </div>\n      `);\n    }\n    div.innerHTML = labels.join('');\n    return div;\n  };\n  return legend;\n};\n\nconst onEachFeature = (feature, layer) => {\n  const popupContent = `\n      <div class=\"info-window\">\n        <h3>${layer.feature.properties.name}</h3>\n        <p>成人口罩\b：${feature.properties.mask_adult} 個</p>\n        <p>兒童口罩：${feature.properties.mask_child} 個</p>\n      </div>\n    `;\n  layer.bindPopup(popupContent);\n};\n\nexport default class Map extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      myPlace: null,\n      markerPool: null,\n      maskMap: null,\n      // mapLayer:null,\n      countryLayer: null,\n      countryName: ''\n    };\n  }\n\n  componentDidMount() {\n    this.markerPool = L.markerClusterGroup({\n      zoomToBoundsOnClick: true,\n      removeOutsideVisibleBounds: true\n    });\n\n    const center = [this.props.latitude, this.props.longitude];\n    // Create map.\n    this.maskMap = L.map('map-canvas', {\n      center,\n      zoom: 12,\n      layers: [\n        L.tileLayer('https://api.mapbox.com/styles/v1/{id}/tiles/{z}/{x}/{y}?access_token={accessToken}', {\n          attribution:\n            'Map data &copy; <a href=\"https://www.openstreetmap.org/\">OpenStreetMap</a> contributors, <a href=\"https://creativecommons.org/licenses/by-sa/2.0/\">CC-BY-SA</a>, Imagery © <a href=\"https://www.mapbox.com/\">Mapbox</a>',\n          // maxZoom: 11,\n          id: 'mapbox/dark-v10',\n          accessToken: 'pk.eyJ1IjoiaWFubGlhbzE5ODciLCJhIjoiY2s2OHFmMzQ0MDV5MjN1bjlmMzF2a3htZyJ9.n70D4lI2aqZ1dj-EGCuqJw'\n        })\n      ]\n    });\n\n    this.marker = L.marker(center).addTo(this.maskMap);\n\n    // Geolocation.\n    this.maskMap.locate({ setView: true, maxZoom: 11 });\n    this.maskMap.on('locationfound', e => {\n      this.setState({ myPlace: e.latlng });\n      // Add marker.\n      this.marker\n        .setLatLng(this.state.myPlace)\n        .bindPopup('You are here!')\n        .openPopup();\n    });\n\n    const legend = getLegendControl();\n    legend.addTo(this.maskMap);\n\n    // ToolBar.\n    const customAction = L.Toolbar2.Action.extend({\n      options: {\n        toolbarIcon: {\n          html: '<div><i aria-hidden=\"true\" class=\"crosshairs small icon\"></i></div>',\n          tooltip: 'Go to the Eiffel Tower'\n        }\n      },\n      addHooks: () => {\n        this.marker\n          .setLatLng(this.state.myPlace)\n          .bindPopup('You are here!')\n          .openPopup();\n        this.maskMap.flyTo(this.state.myPlace, 17);\n      }\n    });\n    new L.Toolbar2.Control({\n      actions: [customAction]\n    }).addTo(this.maskMap);\n  }\n\n  componentDidUpdate() {\n    this.markerPool.clearLayers();\n\n    if (this.props.focus) {\n      const _focus = new L.LatLng(this.props.focus[1], this.props.focus[0]);\n      this.marker\n        .setLatLng(_focus)\n        .bindPopup(\n          `\n          <a href=\"https://www.google.com.tw/maps/dir/${this.state.myPlace.lat},${this.state.myPlace.lng}/${this.props.focus[1]},${this.props.focus[0]}\" target=\"_blank\" rel=\"noopener noreferrer\">\n            導航到這\n          </a>\n        `\n        )\n        .openPopup();\n      this.maskMap.flyTo(_focus, 17);\n    }\n\n    if (this.props.layer && this.props.layer.length === 1) {\n      const country = this.props.layer[0];\n\n      // 相同縣市不清除.\n      if (country.properties.name !== this.countryName) {\n        if (this.countryLayer) this.countryLayer.clearLayers();\n\n        const center = turf.centerOfMass(country);\n        const centerLatLng = new L.LatLng(center.geometry.coordinates[1], center.geometry.coordinates[0]);\n\n        this.countryLayer = L.geoJson(null)\n          .addData(this.props.layer)\n          .addTo(this.maskMap);\n\n        this.countryName = country.properties.name;\n\n        this.marker\n          .setLatLng(centerLatLng)\n          .bindPopup(this.countryName)\n          .openPopup();\n\n        this.maskMap.flyTo(centerLatLng, 10);\n      }\n\n      if (!this.props.markersData) return false;\n\n      const ptsWithin = turf.pointsWithinPolygon(this.props.markersData, this.props.layer[0]);\n      if (ptsWithin) {\n        L.geoJSON(ptsWithin, {\n          style: function(feature) {\n            return { color: feature.properties.color };\n          },\n          onEachFeature,\n          pointToLayer: (feature, latlng) => {\n            const maskCount = feature.properties.mask_adult;\n            const marker = L.circleMarker(latlng, getStyle(maskCount));\n            this.markerPool.addLayer(marker);\n            return marker;\n          }\n        });\n        this.maskMap.addLayer(this.markerPool);\n      }\n    }\n  }\n\n  render() {\n    return <div id=\"map-canvas\"></div>;\n  }\n}\n","import React from 'react';\nimport { Card, Progress, Message, Icon } from 'semantic-ui-react';\n\nexport default class DrugdrugstoreCard extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  getPercent(mask, total) {\n    let percent = mask / total;\n    return percent > 1 ? 100 : percent * 100;\n  }\n\n  handleClick = drugstore => {\n    this.props.onClickDrugstore(drugstore);\n  };\n\n  render() {\n    const currentLocation = `${this.props.city}${this.props.district}`;\n\n    return (\n      <div className=\"floating-panel__list\">\n        {this.props.markersData &&\n          this.props.markersData.features.map(drugstore => {\n            return drugstore.properties.address.substring(0, currentLocation.length) === currentLocation ? (\n              <Card key={drugstore.properties.id}>\n                <Card.Content>\n                  <Card.Header onClick={() => this.handleClick(drugstore.geometry)}>{drugstore.properties.name}</Card.Header>\n                  <Card.Meta>{drugstore.properties.phone}</Card.Meta>\n                  <Card.Description>\n                    <a href={`https://www.google.com.tw/maps/place/${drugstore.properties.address}`} target=\"_blank\" rel=\"noopener noreferrer\">\n                      {drugstore.properties.address}\n                    </a>\n                    <br />\n                    {drugstore.properties.service_note === '' || drugstore.properties.service_note === '無特定' ? null : (\n                      <Message size=\"tiny\">\n                        <Icon name=\"bullhorn\" />\n                        {drugstore.properties.service_note}\n                      </Message>\n                    )}\n                  </Card.Description>\n                </Card.Content>\n                <Card.Content extra>\n                  <Progress percent={this.getPercent(drugstore.properties.mask_adult, 200)} indicating>\n                    成人:{drugstore.properties.mask_adult}\n                  </Progress>\n                  <Progress percent={this.getPercent(drugstore.properties.mask_child, 50)} indicating>\n                    兒童:{drugstore.properties.mask_child}\n                  </Progress>\n                </Card.Content>\n              </Card>\n            ) : null;\n          })}\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport { Dropdown } from 'semantic-ui-react';\n\nimport CITY_AREA from '../data/city-area.json';\n\nexport default class SelectCountry extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      cityOptions: CITY_AREA.map(item => ({\n        key: item.id,\n        text: item.name,\n        value: item.name\n      })),\n      districtOptions: [\n        { key: 1, text: '中正區', value: '中正區' },\n        { key: 2, text: '大同區', value: '大同區' },\n        { key: 3, text: '中山區', value: '中山區' },\n        { key: 4, text: '松山區', value: '松山區' },\n        { key: 5, text: '大安區', value: '大安區' },\n        { key: 6, text: '萬華區', value: '萬華區' },\n        { key: 7, text: '信義區', value: '信義區' },\n        { key: 8, text: '士林區', value: '士林區' },\n        { key: 9, text: '北投區', value: '北投區' },\n        { key: 10, text: '內湖區', value: '內湖區' },\n        { key: 11, text: '南港區', value: '南港區' },\n        { key: 12, text: '文山區', value: '文山區' }\n      ],\n      city: '台北市',\n      district: '大安區'\n    };\n  }\n\n  handleCity = (e, { value }) => {\n    this.props.onSelectCity(value);\n\n    const currentCity = CITY_AREA.find(function(item, index, array) {\n      return item.name === value;\n    });\n    this.setState({\n      city: value,\n      districtOptions: currentCity.districts.map(item => ({\n        key: item.id,\n        text: item.name,\n        value: item.name\n      }))\n    });\n\n    if (currentCity.districts && currentCity.districts.length > 1) {\n      const _district = currentCity.districts[0].name;\n      this.setState({\n        district: _district\n      });\n      this.props.onSelectDistrict(_district);\n    }\n  };\n\n  handleDistrict = (e, { value }) => {\n    this.setState({\n      district: value\n    });\n    this.props.onSelectDistrict(value);\n  };\n\n  render() {\n    const { cityOptions, districtOptions, city, district } = this.state;\n\n    return (\n      <div>\n        <Dropdown\n          button\n          className=\"icon teal\"\n          floating\n          labeled\n          scrolling\n          icon=\"map marker alternate\"\n          options={cityOptions}\n          onChange={this.handleCity}\n          text={city}\n        />\n        <Dropdown\n          button\n          className=\"icon teal\"\n          floating\n          labeled\n          scrolling\n          icon=\"map marker alternate\"\n          options={districtOptions}\n          onChange={this.handleDistrict}\n          text={district}\n        />\n      </div>\n    );\n  }\n}\n","import React from 'react';\n\nimport MaskMap from './components/map';\nimport DrugstoreCard from './components/drugstore-card';\nimport CitySelect from './components/city-select';\n\nimport { Button, Icon } from 'semantic-ui-react';\n\nimport './App.css';\n\nexport default class App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      viewport: {\n        latitude: 25.030313,\n        longitude: 121.54924,\n        zoom: 16\n      },\n      drugstoreGJson: null,\n      twCountyGJson: null,\n      layer: null,\n      focus: null,\n      visible: true,\n      city: '台北市',\n      district: '大安區'\n    };\n  }\n\n  componentDidMount() {\n    fetch('https://raw.githubusercontent.com/kiang/pharmacies/master/json/points.json')\n      .then(response => response.json())\n      .then(geojson => {\n        this.setState({ drugstoreGJson: geojson });\n        document.body.classList.add('dom-ready');\n      })\n      .catch(err => {\n        console.log('錯誤:', err);\n      });\n\n    fetch('https://raw.githubusercontent.com/javaok1987/mask-map/master/src/data/tw-county.geojson')\n      .then(response => response.json())\n      .then(geojson => {\n        this.setState({ twCountyGJson: geojson });\n        this.setState({\n          layer: this.state.twCountyGJson['features'].filter(county => {\n            return county.properties.name === this.state.city;\n          })\n        });\n      })\n      .catch(err => {\n        console.log('錯誤:', err);\n      });\n  }\n\n  toggleSidebar(visible) {\n    this.setState({ visible: !visible });\n  }\n\n  handleCity = city => {\n    this.setState({\n      city,\n      focus: null,\n      layer: this.state.twCountyGJson['features'].filter(county => {\n        return county.properties.name === city;\n      })\n    });\n  };\n\n  handleDistrict = district => {\n    this.setState({ focus: null, district });\n  };\n\n  handleClickDrugstore = drugstore => {\n    this.setState({\n      focus: drugstore.coordinates\n    });\n  };\n\n  render() {\n    const { viewport, drugstoreGJson, city, district, focus, layer } = this.state;\n\n    return (\n      <div className=\"App\">\n        <MaskMap {...viewport} markersData={drugstoreGJson} layer={layer} focus={focus}></MaskMap>\n        <div className={this.state.visible ? 'floating-panel is-visible' : 'floating-panel'}>\n          <CitySelect onSelectCity={this.handleCity} onSelectDistrict={this.handleDistrict}></CitySelect>\n          <DrugstoreCard markersData={drugstoreGJson} city={city} district={district} onClickDrugstore={this.handleClickDrugstore}></DrugstoreCard>\n          <Button icon compact color=\"teal\" labelPosition=\"right\" className=\"floating-panel__close\" onClick={() => this.toggleSidebar(this.state.visible)}>\n            關閉\n            <Icon name={this.state.visible ? 'angle double right' : 'angle double left'} />\n          </Button>\n        </div>\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}